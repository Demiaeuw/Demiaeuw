‚úÖ To-Do : Configuration d'une Interface de Travail Propre via WSL pour l'√âcole 42

- Ce document a pour objectif de vous guider pas √† pas dans l'installation et la configuration de votre environnement 
de travail sous WSL (Windows Subsystem for Linux). Il est con√ßu sp√©cifiquement pour les √©tudiants de l'√âcole 42,
afin de vous permettre de travailler efficacement dans un environnement Linux tout en utilisant Windows.
Vous trouverez ici toutes les √©tapes n√©cessaires pour installer WSL2, configurer Ubuntu, installer les d√©pendances requises
pour les projets de 42, et optimiser votre utilisation de VScode avec WSL. Suivez ces instructions pour vous assurer
que votre configuration est propre, fonctionnelle et adapt√©e aux exigences des projets de l'√âcole 42.

#-----------------------------------------------------------------------------------------------------------------------------------------#

- Disclaimer

üöß - Ce guide pr√©sente une m√©thode pour installer, configurer et d√©sinstaller WSL, bas√©e sur mes pr√©f√©rences et mon exp√©rience personnelle.
Il s'agit d'une fa√ßon de faire parmi d'autres, et il existe certainement d'autres m√©thodes ou outils pour atteindre les m√™mes objectifs.
N'h√©sitez pas √† explorer d'autres ressources ou approches qui pourraient mieux correspondre √† vos besoins ou pr√©f√©rences sp√©cifiques.
Ce guide est destin√© √† vous fournir une base solide, mais vous √™tes encourag√© √† l'adapter en fonction de vos propres exigences.

#-----------------------------------------------------------------------------------------------------------------------------------------#

üí° - Avantages et Inconv√©nients de WSL par rapport √† une Machine Virtuelle

	- Avantages de WSL :

- Performance am√©lior√©e : WSL est int√©gr√© directement dans le syst√®me d'exploitation Windows, 
ce qui permet une utilisation plus fluide des ressources syst√®me (CPU, RAM) par rapport √† une machine virtuelle traditionnelle.
Vous n'avez pas besoin de r√©server une portion sp√©cifique de votre RAM ou CPU, WSL utilise dynamiquement ce dont il a besoin.
- Facilit√© d'installation et de configuration : L'installation de WSL est beaucoup plus simple et rapide que la cr√©ation et la 
configuration d'une machine virtuelle. Vous pouvez commencer √† travailler presque imm√©diatement sans avoir √† g√©rer une machine virtuelle enti√®re.
- Int√©gration avec Windows : WSL permet une interaction directe entre Linux et Windows, vous permettant par exemple d'acc√©der
√† vos fichiers Windows depuis Linux et inversement. Cela facilite les workflows qui n√©cessitent l'utilisation de logiciels des deux environnements.
- Utilisation r√©duite des ressources : Contrairement √† une machine virtuelle, WSL ne n√©cessite pas de virtualisation compl√®te du mat√©riel,
ce qui signifie une utilisation moindre des ressources du syst√®me, une consommation d'√©nergie r√©duite, et une dur√©e de vie de la batterie
prolong√©e sur les ordinateurs portables.

	- Inconv√©nients de WSL :

- Compatibilit√© limit√©e : Bien que WSL ait fait de grands progr√®s, il n'offre pas une compatibilit√© compl√®te avec toutes les applications Linux,
notamment celles qui n√©cessitent des modules de noyau ou des fonctionnalit√©s sp√©cifiques du mat√©riel.
- Moins d'isolation : WSL partage le noyau avec Windows, ce qui signifie que les processus Linux peuvent potentiellement affecter votre syst√®me Windows.
Une machine virtuelle offre une isolation compl√®te, limitant les risques de conflits ou de failles de s√©curit√© entre les syst√®mes.
- Performances graphiques limit√©es : Bien que WSL2 ait introduit un support graphique avec WSLg, il reste encore en retrait par rapport aux capacit√©s
d'une machine virtuelle avec une acc√©l√©ration GPU d√©di√©e. Pour les t√¢ches n√©cessitant une interface graphique complexe
ou de la puissance graphique, une VM peut √™tre plus adapt√©e.
- Moins de contr√¥le sur l'environnement : Dans une machine virtuelle, vous avez un contr√¥le total sur l'environnement, y compris le mat√©riel virtuel,
les r√©seaux, et plus encore. WSL est plus limit√© √† cet √©gard, ce qui peut poser des probl√®mes pour des configurations de r√©seau sp√©cifiques
ou des besoins de virtualisation avanc√©s.

- En r√©sum√©, WSL est id√©al pour les utilisateurs qui cherchent √† int√©grer des outils Linux dans leur environnement Windows de mani√®re transparente,
avec une configuration rapide et une utilisation efficace des ressources. Toutefois, pour des besoins sp√©cifiques en termes de compatibilit√©,
d'isolation, ou de performances graphiques, une machine virtuelle reste une option plus robuste.

#-----------------------------------------------------------------------------------------------------------------------------------------#

üöß - Note importante :** Les √©l√©ments de cette to-do sont soit des actions √† effectuer, soit des commandes √† taper dans le terminal. 
Les commandes √† taper sont indiqu√©es sans tiret devant elles. 
Lorsque vous voyez une commande sans tiret, copiez-la directement dans votre terminal.


- Installer WSL2:

	- Dans PowerShell
		wsl --install
	- V√©rifier la version
		wsl -l -v


- Installer Ubuntu:

	- Dans PowerShell
		wsl --list --online
	- Installer une distribution sp√©cifique
		wsl --install -d <Nom_de_la_Distribution>


- Mise √† jour WSL2:

	- Dans PowerShell
		wsl --update


- Red√©marrer WSL2:

	- Dans PowerShell
		wsl --shutdown



- Red√©marrer le PC quand il le demande



- Installation des d√©pendances n√©cessaires au cursus 42:

	- Dans WSL
		sudo apt update
		sudo apt upgrade

	- Interface graphique (pour les projets utilisant la minilibx)
		sudo apt install x11-apps -y

	(-Explorateur de fichiers)
		sudo apt install nautilus -y

	- Norminette
		sudo apt install python3-pip
	|	pip3 install norminette
	\	norminette -v
	  \
	    ->	-si WARNING
		vim ~/.bashrc
		-ajouter la ligne √† la fin du fichier
		export PATH="$HOME/.local/bin:$PATH"

	- Valgrind
		sudo apt install valgrind
		valgrind --version 
	


- Cl√© SSH et Git / GitHub:

	- Configuration de base de Git
		git config user.name "<votre_nom>"
		git config user.email "<votre_email@example.com>"
		git config --global --list

	- Cr√©ation cl√© SSH
		ssh-keygen
		enter
		enter
		enter
		enter
		cd
		cd .ssh
		cat id_rsa.pub
		-ajoutez cette cl√© o√π c'est n√©cessaire.

		- ATTENTION, si vous avez d√©j√† une cl√© SSH pour votre environnement Windows, vous devrez malgr√© tout en g√©n√©rer 
		une pour WSL, pour √©viter les erreurs lors de vos commits. Passer par la cl√© de votre Windows cr√©e des 
		erreurs de synchronisation pour utiliser pleinement les fonctionnalit√©s de Git.



- Utiliser VScode:

	- Dans VScode
		- Installer l'addon Explorateur Distant
		- Connectez-vous √† votre distribution Ubuntu via cet Explorateur Distant

			- Cela permet de lancer VScode directement dans l'environnement Linux de WSL 
			pour √©viter les probl√®mes. Si vous ouvrez le dossier via l'explorateur Windows directement 
			cela peut g√©n√©rer des erreurs de compilation et autres.

			- Il faudra synchroniser vos addons pr√©f√©r√©s qui sont sur le VScode de base dans Ubuntu. Pour cela, dans Addons, vous avez
			une nouvelle cat√©gorie : WSL : <votre distribution> avec un nuage avec une fl√®che, cliquez dessus et
			s√©lectionnez les addons que vous voulez utiliser.

			- Pour quitter WSL dans VScode, cliquez en bas √† gauche sur l'ic√¥ne √† double chevron pour acc√©der au menu
			des connexions √† distance.



- Acc√®s √† WSL via terminal:

	- Je vous conseille de passer par l'app Terminal de Windows et d'ouvrir un nouvel onglet en s√©lectionnant Ubuntu.
	Si vous tapez wsl dans PowerShell, vous allez arriver dans Windows avec WSL. Ouvrir un nouvel onglet sous Ubuntu 
	vous permet d'√™tre directement dans WSL mais surtout de ne pas en sortir et donc d'√©viter tout probl√®me de synchronisation
	ou autres probl√®mes de compatibilit√©.
	-Partez du principe que WSL est une machine virtuelle (m√™me si ce n'est pas le cas) dans un premier temps.



- Pensez √† shutdown WSL:

	- Dans PowerShell
		wsl --shutdown
	- WSL se lance automatiquement quand vous essayez d'acc√©der √† un syst√®me ou sous-syst√®me de votre WSL. Normalement il doit ce 
	quitter de lui m√™me si vous ne l'utilisez plus mais je vous conseil de le shutdown pour √©viter la surconsommation de votre
	processeur et de votre RAM (surtout si vous utilisez une petite config). Pour ce faire, soit dans PowerShell soit directement
	dans le gestionnaire de t√¢ches, il faut shutdown VmmemWSL.


#-----------------------------------------------------------------------------------------------------------------------------------------#


- D√©sinstallation de WSL

	- D√©sinstaller les distributions Linux :

		- Dans PowerShell, listez toutes les distributions install√©es
			wsl --list --all
		- D√©sinstallez chaque distribution une par une
			wsl --unregister <Nom_de_la_Distribution>


	- D√©sinstaller les composants WSL :

		- D√©sactivez WSL en d√©sinstallant ses composants via PowerShell :
			dism.exe /online /disable-feature /featurename:Microsoft-Windows-Subsystem-Linux
			dism.exe /online /disable-feature /featurename:VirtualMachinePlatform


	-Supprimer les fichiers associ√©s √† WSL :

		- Supprimez les dossiers et fichiers restants dans le r√©pertoire suivant :
			%USERPROFILE%\AppData\Local\Packages\
		- Recherchez les dossiers li√©s √† WSL (nomm√©s g√©n√©ralement "CanonicalGroupLimited..." ou similaires) et supprimez-les.

	- Red√©marrer votre PC :

		- Une fois toutes les √©tapes ci-dessus r√©alis√©es, red√©marrez votre PC pour finaliser la d√©sinstallation.

	- V√©rification : 

		- V√©rifier la version
			wsl -l -v


