-Installer WSL2

	-Dans PowerShell
		wsl --install
	-Vérifier la version
		wsl -l -v

-Installer Ubuntu

	-Dans PowerShell
		wsl --list --online
	-Installer une distribution spécifique
		wsl --install -d <Nom_de_la_Distribution>

-Mise à jour WSL2

	-Dans PowerShell
		wsl --update

-Redémarrer WSL2

	-Dans PowerShell
		wsl --shutdown

-Redémarrer le PC quand il le demande

-Installation des dépendances nécessaires au cursus 42

	-Dans WSL
		sudo apt update
		sudo apt upgrade

	-Interface graphique
		sudo apt install x11-apps -y

	(-Explorateur de fichiers)
		sudo apt install nautilus -y

	-Norminette
		sudo apt install python3-pip
	|	pip3 install norminette
	\	norminette -v
	  \
	    ->	-si WARNING
		vim ~/.bashrc
		-ajouter la ligne à la fin du fichier
		export PATH="$HOME/.local/bin:$PATH"

	-Valgrind
		sudo apt install valgrind
		valgrind --version 
	

-Clé SSH et Git / GitHub

	-Configuration de base de Git
		git config user.name <votre_nom>
		git config user.email <votre_email@example.com>
		git config --global --list

	-Création clé SSH
		ssh-keygen
		enter
		enter
		enter
		enter
		cd
		cd .ssh
		cat id_rsa.pub
		-ajoutez cette clé où c'est nécessaire.

		ATTENTION, si vous avez déjà une clé SSH pour votre environnement Windows, vous devrez malgré tout en générer 
		une pour WSL, pour éviter les erreurs lors de vos commits. Passer par la clé de votre Windows crée des 
		erreurs de synchronisation pour utiliser pleinement les fonctionnalités de Git.

-Utiliser VScode

	-Dans VScode
		-Installer l'addon Explorateur Distant
		-Connectez-vous à votre distribution Ubuntu via cet Explorateur Distant

			Cela permet de lancer VScode directement dans l'environnement Linux de WSL 
			pour éviter les problèmes. Si vous ouvrez le dossier via l'explorateur Windows directement 
			cela peut générer des erreurs de compilation et autres.

			Il faudra synchroniser vos addons préférés qui sont sur le VScode de base dans Ubuntu. Pour cela, dans Addons, vous avez
			une nouvelle catégorie : WSL : <votre distribution> avec un nuage avec une flèche, cliquez dessus et
			sélectionnez les addons que vous voulez utiliser.

			Pour quitter WSL dans VScode, cliquez en bas à gauche sur l'icône à double chevron pour accéder au menu
			des connexions à distance.

-Accès à WSL via terminal

	-Je vous conseille de passer par l'app Terminal de Windows et d'ouvrir un nouvel onglet en sélectionnant Ubuntu.
	Si vous tapez wsl dans PowerShell, vous allez arriver dans Windows avec WSL. Ouvrir un nouvel onglet sous Ubuntu 
	vous permet d'être directement dans WSL mais surtout de ne pas en sortir et donc d'éviter tout problème de synchronisation
	ou autres problèmes de compatibilité.
	-Partez du principe que WSL est une machine virtuelle (même si ce n'est pas le cas) dans un premier temps.

-Pensez à shutdown WSL

	-Dans PowerShell
		wsl --shutdown
	-WSL se lance automatiquement quand vous essayez d'accéder à un système ou sous-système de votre WSL. Il faut
	le shutdown pour éviter la surconsommation de votre processeur et de votre RAM. Pour ce faire, soit dans PowerShell
	soit directement dans le gestionnaire de tâches, il faut shutdown VmmemWSL.
